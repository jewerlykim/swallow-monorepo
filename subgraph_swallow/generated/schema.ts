// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class ShortCut extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ShortCut entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ShortCut must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ShortCut", id.toString(), this);
    }
  }

  static load(id: string): ShortCut | null {
    return changetype<ShortCut | null>(store.get("ShortCut", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get endpoint(): string {
    let value = this.get("endpoint");
    return value!.toString();
  }

  set endpoint(value: string) {
    this.set("endpoint", Value.fromString(value));
  }

  get selector(): string {
    let value = this.get("selector");
    return value!.toString();
  }

  set selector(value: string) {
    this.set("selector", Value.fromString(value));
  }

  get contractAddr(): Bytes {
    let value = this.get("contractAddr");
    return value!.toBytes();
  }

  set contractAddr(value: Bytes) {
    this.set("contractAddr", Value.fromBytes(value));
  }

  get userParams(): Array<string> {
    let value = this.get("userParams");
    return value!.toStringArray();
  }

  set userParams(value: Array<string>) {
    this.set("userParams", Value.fromStringArray(value));
  }

  get shortCutsType(): string {
    let value = this.get("shortCutsType");
    return value!.toString();
  }

  set shortCutsType(value: string) {
    this.set("shortCutsType", Value.fromString(value));
  }
}

export class UserParam extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UserParam entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type UserParam must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("UserParam", id.toString(), this);
    }
  }

  static load(id: string): UserParam | null {
    return changetype<UserParam | null>(store.get("UserParam", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get value(): string {
    let value = this.get("value");
    return value!.toString();
  }

  set value(value: string) {
    this.set("value", Value.fromString(value));
  }

  get shortcut(): string {
    let value = this.get("shortcut");
    return value!.toString();
  }

  set shortcut(value: string) {
    this.set("shortcut", Value.fromString(value));
  }
}
